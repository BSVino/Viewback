// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/data.proto

#ifndef PROTOBUF_protobuf_2fdata_2eproto__INCLUDED
#define PROTOBUF_protobuf_2fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protobuf_2fdata_2eproto();
void protobuf_AssignDesc_protobuf_2fdata_2eproto();
void protobuf_ShutdownFile_protobuf_2fdata_2eproto();

class Data;
class DataChannel;
class DataGroup;
class DataLabel;
class DataControl;
class Packet;

enum vb_data_type_t {
  VB_DATATYPE_NONE = 0,
  VB_DATATYPE_INT = 1,
  VB_DATATYPE_FLOAT = 2,
  VB_DATATYPE_VECTOR = 3
};
bool vb_data_type_t_IsValid(int value);
const vb_data_type_t vb_data_type_t_MIN = VB_DATATYPE_NONE;
const vb_data_type_t vb_data_type_t_MAX = VB_DATATYPE_VECTOR;
const int vb_data_type_t_ARRAYSIZE = vb_data_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* vb_data_type_t_descriptor();
inline const ::std::string& vb_data_type_t_Name(vb_data_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    vb_data_type_t_descriptor(), value);
}
inline bool vb_data_type_t_Parse(
    const ::std::string& name, vb_data_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<vb_data_type_t>(
    vb_data_type_t_descriptor(), name, value);
}
enum vb_control_t {
  VB_CONTROL_NONE = 0,
  VB_CONTROL_BUTTON = 1,
  VB_CONTROL_SLIDER_FLOAT = 2,
  VB_CONTROL_SLIDER_INT = 3,
  VB_CONTROL_MAX = 4
};
bool vb_control_t_IsValid(int value);
const vb_control_t vb_control_t_MIN = VB_CONTROL_NONE;
const vb_control_t vb_control_t_MAX = VB_CONTROL_MAX;
const int vb_control_t_ARRAYSIZE = vb_control_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* vb_control_t_descriptor();
inline const ::std::string& vb_control_t_Name(vb_control_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    vb_control_t_descriptor(), value);
}
inline bool vb_control_t_Parse(
    const ::std::string& name, vb_control_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<vb_control_t>(
    vb_control_t_descriptor(), name, value);
}
// ===================================================================

class Data : public ::google::protobuf::Message {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 handle = 1;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 1;
  inline ::google::protobuf::uint32 handle() const;
  inline void set_handle(::google::protobuf::uint32 value);

  // optional uint32 data_int = 3;
  inline bool has_data_int() const;
  inline void clear_data_int();
  static const int kDataIntFieldNumber = 3;
  inline ::google::protobuf::uint32 data_int() const;
  inline void set_data_int(::google::protobuf::uint32 value);

  // optional float data_float = 4;
  inline bool has_data_float() const;
  inline void clear_data_float();
  static const int kDataFloatFieldNumber = 4;
  inline float data_float() const;
  inline void set_data_float(float value);

  // optional float data_float_x = 5;
  inline bool has_data_float_x() const;
  inline void clear_data_float_x();
  static const int kDataFloatXFieldNumber = 5;
  inline float data_float_x() const;
  inline void set_data_float_x(float value);

  // optional float data_float_y = 6;
  inline bool has_data_float_y() const;
  inline void clear_data_float_y();
  static const int kDataFloatYFieldNumber = 6;
  inline float data_float_y() const;
  inline void set_data_float_y(float value);

  // optional float data_float_z = 7;
  inline bool has_data_float_z() const;
  inline void clear_data_float_z();
  static const int kDataFloatZFieldNumber = 7;
  inline float data_float_z() const;
  inline void set_data_float_z(float value);

  // optional double time_double = 8;
  inline bool has_time_double() const;
  inline void clear_time_double();
  static const int kTimeDoubleFieldNumber = 8;
  inline double time_double() const;
  inline void set_time_double(double value);

  // optional uint64 time_uint64 = 9;
  inline bool has_time_uint64() const;
  inline void clear_time_uint64();
  static const int kTimeUint64FieldNumber = 9;
  inline ::google::protobuf::uint64 time_uint64() const;
  inline void set_time_uint64(::google::protobuf::uint64 value);

  // optional double maintain_time_double = 10;
  inline bool has_maintain_time_double() const;
  inline void clear_maintain_time_double();
  static const int kMaintainTimeDoubleFieldNumber = 10;
  inline double maintain_time_double() const;
  inline void set_maintain_time_double(double value);

  // optional uint64 maintain_time_uint64 = 11;
  inline bool has_maintain_time_uint64() const;
  inline void clear_maintain_time_uint64();
  static const int kMaintainTimeUint64FieldNumber = 11;
  inline ::google::protobuf::uint64 maintain_time_uint64() const;
  inline void set_maintain_time_uint64(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Data)
 private:
  inline void set_has_handle();
  inline void clear_has_handle();
  inline void set_has_data_int();
  inline void clear_has_data_int();
  inline void set_has_data_float();
  inline void clear_has_data_float();
  inline void set_has_data_float_x();
  inline void clear_has_data_float_x();
  inline void set_has_data_float_y();
  inline void clear_has_data_float_y();
  inline void set_has_data_float_z();
  inline void clear_has_data_float_z();
  inline void set_has_time_double();
  inline void clear_has_time_double();
  inline void set_has_time_uint64();
  inline void clear_has_time_uint64();
  inline void set_has_maintain_time_double();
  inline void clear_has_maintain_time_double();
  inline void set_has_maintain_time_uint64();
  inline void clear_has_maintain_time_uint64();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 handle_;
  ::google::protobuf::uint32 data_int_;
  float data_float_;
  float data_float_x_;
  float data_float_y_;
  float data_float_z_;
  double time_double_;
  ::google::protobuf::uint64 time_uint64_;
  double maintain_time_double_;
  ::google::protobuf::uint64 maintain_time_uint64_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fdata_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fdata_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fdata_2eproto();

  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// -------------------------------------------------------------------

class DataChannel : public ::google::protobuf::Message {
 public:
  DataChannel();
  virtual ~DataChannel();

  DataChannel(const DataChannel& from);

  inline DataChannel& operator=(const DataChannel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataChannel& default_instance();

  void Swap(DataChannel* other);

  // implements Message ----------------------------------------------

  DataChannel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataChannel& from);
  void MergeFrom(const DataChannel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .vb_data_type_t type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::vb_data_type_t type() const;
  inline void set_type(::vb_data_type_t value);

  // optional uint32 handle = 3;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 3;
  inline ::google::protobuf::uint32 handle() const;
  inline void set_handle(::google::protobuf::uint32 value);

  // optional float range_min = 4;
  inline bool has_range_min() const;
  inline void clear_range_min();
  static const int kRangeMinFieldNumber = 4;
  inline float range_min() const;
  inline void set_range_min(float value);

  // optional float range_max = 5;
  inline bool has_range_max() const;
  inline void clear_range_max();
  static const int kRangeMaxFieldNumber = 5;
  inline float range_max() const;
  inline void set_range_max(float value);

  // @@protoc_insertion_point(class_scope:DataChannel)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_handle();
  inline void clear_has_handle();
  inline void set_has_range_min();
  inline void clear_has_range_min();
  inline void set_has_range_max();
  inline void clear_has_range_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int type_;
  ::google::protobuf::uint32 handle_;
  float range_min_;
  float range_max_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fdata_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fdata_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fdata_2eproto();

  void InitAsDefaultInstance();
  static DataChannel* default_instance_;
};
// -------------------------------------------------------------------

class DataGroup : public ::google::protobuf::Message {
 public:
  DataGroup();
  virtual ~DataGroup();

  DataGroup(const DataGroup& from);

  inline DataGroup& operator=(const DataGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataGroup& default_instance();

  void Swap(DataGroup* other);

  // implements Message ----------------------------------------------

  DataGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataGroup& from);
  void MergeFrom(const DataGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated uint32 channels = 2 [packed = true];
  inline int channels_size() const;
  inline void clear_channels();
  static const int kChannelsFieldNumber = 2;
  inline ::google::protobuf::uint32 channels(int index) const;
  inline void set_channels(int index, ::google::protobuf::uint32 value);
  inline void add_channels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      channels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_channels();

  // @@protoc_insertion_point(class_scope:DataGroup)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > channels_;
  mutable int _channels_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fdata_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fdata_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fdata_2eproto();

  void InitAsDefaultInstance();
  static DataGroup* default_instance_;
};
// -------------------------------------------------------------------

class DataLabel : public ::google::protobuf::Message {
 public:
  DataLabel();
  virtual ~DataLabel();

  DataLabel(const DataLabel& from);

  inline DataLabel& operator=(const DataLabel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataLabel& default_instance();

  void Swap(DataLabel* other);

  // implements Message ----------------------------------------------

  DataLabel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataLabel& from);
  void MergeFrom(const DataLabel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // optional uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional string label = 3;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 3;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:DataLabel)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_label();
  inline void clear_has_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 channel_;
  ::google::protobuf::uint32 value_;
  ::std::string* label_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fdata_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fdata_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fdata_2eproto();

  void InitAsDefaultInstance();
  static DataLabel* default_instance_;
};
// -------------------------------------------------------------------

class DataControl : public ::google::protobuf::Message {
 public:
  DataControl();
  virtual ~DataControl();

  DataControl(const DataControl& from);

  inline DataControl& operator=(const DataControl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataControl& default_instance();

  void Swap(DataControl* other);

  // implements Message ----------------------------------------------

  DataControl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataControl& from);
  void MergeFrom(const DataControl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .vb_control_t type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::vb_control_t type() const;
  inline void set_type(::vb_control_t value);

  // optional float range_min_float = 3;
  inline bool has_range_min_float() const;
  inline void clear_range_min_float();
  static const int kRangeMinFloatFieldNumber = 3;
  inline float range_min_float() const;
  inline void set_range_min_float(float value);

  // optional float range_max_float = 4;
  inline bool has_range_max_float() const;
  inline void clear_range_max_float();
  static const int kRangeMaxFloatFieldNumber = 4;
  inline float range_max_float() const;
  inline void set_range_max_float(float value);

  // optional uint32 num_steps = 5;
  inline bool has_num_steps() const;
  inline void clear_num_steps();
  static const int kNumStepsFieldNumber = 5;
  inline ::google::protobuf::uint32 num_steps() const;
  inline void set_num_steps(::google::protobuf::uint32 value);

  // optional uint32 range_min_int = 6;
  inline bool has_range_min_int() const;
  inline void clear_range_min_int();
  static const int kRangeMinIntFieldNumber = 6;
  inline ::google::protobuf::uint32 range_min_int() const;
  inline void set_range_min_int(::google::protobuf::uint32 value);

  // optional uint32 range_max_int = 7;
  inline bool has_range_max_int() const;
  inline void clear_range_max_int();
  static const int kRangeMaxIntFieldNumber = 7;
  inline ::google::protobuf::uint32 range_max_int() const;
  inline void set_range_max_int(::google::protobuf::uint32 value);

  // optional uint32 step_size = 8;
  inline bool has_step_size() const;
  inline void clear_step_size();
  static const int kStepSizeFieldNumber = 8;
  inline ::google::protobuf::uint32 step_size() const;
  inline void set_step_size(::google::protobuf::uint32 value);

  // optional float value_float = 9;
  inline bool has_value_float() const;
  inline void clear_value_float();
  static const int kValueFloatFieldNumber = 9;
  inline float value_float() const;
  inline void set_value_float(float value);

  // optional uint32 value_int = 10;
  inline bool has_value_int() const;
  inline void clear_value_int();
  static const int kValueIntFieldNumber = 10;
  inline ::google::protobuf::uint32 value_int() const;
  inline void set_value_int(::google::protobuf::uint32 value);

  // optional string command = 11;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 11;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  inline ::std::string* release_command();
  inline void set_allocated_command(::std::string* command);

  // @@protoc_insertion_point(class_scope:DataControl)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_range_min_float();
  inline void clear_has_range_min_float();
  inline void set_has_range_max_float();
  inline void clear_has_range_max_float();
  inline void set_has_num_steps();
  inline void clear_has_num_steps();
  inline void set_has_range_min_int();
  inline void clear_has_range_min_int();
  inline void set_has_range_max_int();
  inline void clear_has_range_max_int();
  inline void set_has_step_size();
  inline void clear_has_step_size();
  inline void set_has_value_float();
  inline void clear_has_value_float();
  inline void set_has_value_int();
  inline void clear_has_value_int();
  inline void set_has_command();
  inline void clear_has_command();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int type_;
  float range_min_float_;
  float range_max_float_;
  ::google::protobuf::uint32 num_steps_;
  ::google::protobuf::uint32 range_min_int_;
  ::google::protobuf::uint32 range_max_int_;
  ::google::protobuf::uint32 step_size_;
  float value_float_;
  ::std::string* command_;
  ::google::protobuf::uint32 value_int_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fdata_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fdata_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fdata_2eproto();

  void InitAsDefaultInstance();
  static DataControl* default_instance_;
};
// -------------------------------------------------------------------

class Packet : public ::google::protobuf::Message {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  void Swap(Packet* other);

  // implements Message ----------------------------------------------

  Packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Data data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Data& data() const;
  inline ::Data* mutable_data();
  inline ::Data* release_data();
  inline void set_allocated_data(::Data* data);

  // repeated .DataChannel data_channels = 2;
  inline int data_channels_size() const;
  inline void clear_data_channels();
  static const int kDataChannelsFieldNumber = 2;
  inline const ::DataChannel& data_channels(int index) const;
  inline ::DataChannel* mutable_data_channels(int index);
  inline ::DataChannel* add_data_channels();
  inline const ::google::protobuf::RepeatedPtrField< ::DataChannel >&
      data_channels() const;
  inline ::google::protobuf::RepeatedPtrField< ::DataChannel >*
      mutable_data_channels();

  // repeated .DataGroup data_groups = 3;
  inline int data_groups_size() const;
  inline void clear_data_groups();
  static const int kDataGroupsFieldNumber = 3;
  inline const ::DataGroup& data_groups(int index) const;
  inline ::DataGroup* mutable_data_groups(int index);
  inline ::DataGroup* add_data_groups();
  inline const ::google::protobuf::RepeatedPtrField< ::DataGroup >&
      data_groups() const;
  inline ::google::protobuf::RepeatedPtrField< ::DataGroup >*
      mutable_data_groups();

  // repeated .DataLabel data_labels = 4;
  inline int data_labels_size() const;
  inline void clear_data_labels();
  static const int kDataLabelsFieldNumber = 4;
  inline const ::DataLabel& data_labels(int index) const;
  inline ::DataLabel* mutable_data_labels(int index);
  inline ::DataLabel* add_data_labels();
  inline const ::google::protobuf::RepeatedPtrField< ::DataLabel >&
      data_labels() const;
  inline ::google::protobuf::RepeatedPtrField< ::DataLabel >*
      mutable_data_labels();

  // repeated .DataControl data_controls = 5;
  inline int data_controls_size() const;
  inline void clear_data_controls();
  static const int kDataControlsFieldNumber = 5;
  inline const ::DataControl& data_controls(int index) const;
  inline ::DataControl* mutable_data_controls(int index);
  inline ::DataControl* add_data_controls();
  inline const ::google::protobuf::RepeatedPtrField< ::DataControl >&
      data_controls() const;
  inline ::google::protobuf::RepeatedPtrField< ::DataControl >*
      mutable_data_controls();

  // optional string console_output = 6;
  inline bool has_console_output() const;
  inline void clear_console_output();
  static const int kConsoleOutputFieldNumber = 6;
  inline const ::std::string& console_output() const;
  inline void set_console_output(const ::std::string& value);
  inline void set_console_output(const char* value);
  inline void set_console_output(const char* value, size_t size);
  inline ::std::string* mutable_console_output();
  inline ::std::string* release_console_output();
  inline void set_allocated_console_output(::std::string* console_output);

  // optional string status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  inline void set_allocated_status(::std::string* status);

  // optional bool is_registration = 8;
  inline bool has_is_registration() const;
  inline void clear_is_registration();
  static const int kIsRegistrationFieldNumber = 8;
  inline bool is_registration() const;
  inline void set_is_registration(bool value);

  // @@protoc_insertion_point(class_scope:Packet)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_console_output();
  inline void clear_has_console_output();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_is_registration();
  inline void clear_has_is_registration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Data* data_;
  ::google::protobuf::RepeatedPtrField< ::DataChannel > data_channels_;
  ::google::protobuf::RepeatedPtrField< ::DataGroup > data_groups_;
  ::google::protobuf::RepeatedPtrField< ::DataLabel > data_labels_;
  ::google::protobuf::RepeatedPtrField< ::DataControl > data_controls_;
  ::std::string* console_output_;
  ::std::string* status_;
  bool is_registration_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fdata_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fdata_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fdata_2eproto();

  void InitAsDefaultInstance();
  static Packet* default_instance_;
};
// ===================================================================


// ===================================================================

// Data

// optional uint32 handle = 1;
inline bool Data::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_handle() {
  handle_ = 0u;
  clear_has_handle();
}
inline ::google::protobuf::uint32 Data::handle() const {
  return handle_;
}
inline void Data::set_handle(::google::protobuf::uint32 value) {
  set_has_handle();
  handle_ = value;
}

// optional uint32 data_int = 3;
inline bool Data::has_data_int() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_data_int() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_data_int() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_data_int() {
  data_int_ = 0u;
  clear_has_data_int();
}
inline ::google::protobuf::uint32 Data::data_int() const {
  return data_int_;
}
inline void Data::set_data_int(::google::protobuf::uint32 value) {
  set_has_data_int();
  data_int_ = value;
}

// optional float data_float = 4;
inline bool Data::has_data_float() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Data::set_has_data_float() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Data::clear_has_data_float() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Data::clear_data_float() {
  data_float_ = 0;
  clear_has_data_float();
}
inline float Data::data_float() const {
  return data_float_;
}
inline void Data::set_data_float(float value) {
  set_has_data_float();
  data_float_ = value;
}

// optional float data_float_x = 5;
inline bool Data::has_data_float_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Data::set_has_data_float_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Data::clear_has_data_float_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Data::clear_data_float_x() {
  data_float_x_ = 0;
  clear_has_data_float_x();
}
inline float Data::data_float_x() const {
  return data_float_x_;
}
inline void Data::set_data_float_x(float value) {
  set_has_data_float_x();
  data_float_x_ = value;
}

// optional float data_float_y = 6;
inline bool Data::has_data_float_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Data::set_has_data_float_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Data::clear_has_data_float_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Data::clear_data_float_y() {
  data_float_y_ = 0;
  clear_has_data_float_y();
}
inline float Data::data_float_y() const {
  return data_float_y_;
}
inline void Data::set_data_float_y(float value) {
  set_has_data_float_y();
  data_float_y_ = value;
}

// optional float data_float_z = 7;
inline bool Data::has_data_float_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Data::set_has_data_float_z() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Data::clear_has_data_float_z() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Data::clear_data_float_z() {
  data_float_z_ = 0;
  clear_has_data_float_z();
}
inline float Data::data_float_z() const {
  return data_float_z_;
}
inline void Data::set_data_float_z(float value) {
  set_has_data_float_z();
  data_float_z_ = value;
}

// optional double time_double = 8;
inline bool Data::has_time_double() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Data::set_has_time_double() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Data::clear_has_time_double() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Data::clear_time_double() {
  time_double_ = 0;
  clear_has_time_double();
}
inline double Data::time_double() const {
  return time_double_;
}
inline void Data::set_time_double(double value) {
  set_has_time_double();
  time_double_ = value;
}

// optional uint64 time_uint64 = 9;
inline bool Data::has_time_uint64() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Data::set_has_time_uint64() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Data::clear_has_time_uint64() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Data::clear_time_uint64() {
  time_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_time_uint64();
}
inline ::google::protobuf::uint64 Data::time_uint64() const {
  return time_uint64_;
}
inline void Data::set_time_uint64(::google::protobuf::uint64 value) {
  set_has_time_uint64();
  time_uint64_ = value;
}

// optional double maintain_time_double = 10;
inline bool Data::has_maintain_time_double() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Data::set_has_maintain_time_double() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Data::clear_has_maintain_time_double() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Data::clear_maintain_time_double() {
  maintain_time_double_ = 0;
  clear_has_maintain_time_double();
}
inline double Data::maintain_time_double() const {
  return maintain_time_double_;
}
inline void Data::set_maintain_time_double(double value) {
  set_has_maintain_time_double();
  maintain_time_double_ = value;
}

// optional uint64 maintain_time_uint64 = 11;
inline bool Data::has_maintain_time_uint64() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Data::set_has_maintain_time_uint64() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Data::clear_has_maintain_time_uint64() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Data::clear_maintain_time_uint64() {
  maintain_time_uint64_ = GOOGLE_ULONGLONG(0);
  clear_has_maintain_time_uint64();
}
inline ::google::protobuf::uint64 Data::maintain_time_uint64() const {
  return maintain_time_uint64_;
}
inline void Data::set_maintain_time_uint64(::google::protobuf::uint64 value) {
  set_has_maintain_time_uint64();
  maintain_time_uint64_ = value;
}

// -------------------------------------------------------------------

// DataChannel

// optional string name = 1;
inline bool DataChannel::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataChannel::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataChannel::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataChannel::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DataChannel::name() const {
  return *name_;
}
inline void DataChannel::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataChannel::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataChannel::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataChannel::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DataChannel::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataChannel::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .vb_data_type_t type = 2;
inline bool DataChannel::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataChannel::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataChannel::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataChannel::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::vb_data_type_t DataChannel::type() const {
  return static_cast< ::vb_data_type_t >(type_);
}
inline void DataChannel::set_type(::vb_data_type_t value) {
  assert(::vb_data_type_t_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 handle = 3;
inline bool DataChannel::has_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataChannel::set_has_handle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataChannel::clear_has_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataChannel::clear_handle() {
  handle_ = 0u;
  clear_has_handle();
}
inline ::google::protobuf::uint32 DataChannel::handle() const {
  return handle_;
}
inline void DataChannel::set_handle(::google::protobuf::uint32 value) {
  set_has_handle();
  handle_ = value;
}

// optional float range_min = 4;
inline bool DataChannel::has_range_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataChannel::set_has_range_min() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataChannel::clear_has_range_min() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataChannel::clear_range_min() {
  range_min_ = 0;
  clear_has_range_min();
}
inline float DataChannel::range_min() const {
  return range_min_;
}
inline void DataChannel::set_range_min(float value) {
  set_has_range_min();
  range_min_ = value;
}

// optional float range_max = 5;
inline bool DataChannel::has_range_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataChannel::set_has_range_max() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataChannel::clear_has_range_max() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataChannel::clear_range_max() {
  range_max_ = 0;
  clear_has_range_max();
}
inline float DataChannel::range_max() const {
  return range_max_;
}
inline void DataChannel::set_range_max(float value) {
  set_has_range_max();
  range_max_ = value;
}

// -------------------------------------------------------------------

// DataGroup

// optional string name = 1;
inline bool DataGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataGroup::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DataGroup::name() const {
  return *name_;
}
inline void DataGroup::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataGroup::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataGroup::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataGroup::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DataGroup::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataGroup::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 channels = 2 [packed = true];
inline int DataGroup::channels_size() const {
  return channels_.size();
}
inline void DataGroup::clear_channels() {
  channels_.Clear();
}
inline ::google::protobuf::uint32 DataGroup::channels(int index) const {
  return channels_.Get(index);
}
inline void DataGroup::set_channels(int index, ::google::protobuf::uint32 value) {
  channels_.Set(index, value);
}
inline void DataGroup::add_channels(::google::protobuf::uint32 value) {
  channels_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DataGroup::channels() const {
  return channels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DataGroup::mutable_channels() {
  return &channels_;
}

// -------------------------------------------------------------------

// DataLabel

// optional uint32 channel = 1;
inline bool DataLabel::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataLabel::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataLabel::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataLabel::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 DataLabel::channel() const {
  return channel_;
}
inline void DataLabel::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
}

// optional uint32 value = 2;
inline bool DataLabel::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataLabel::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataLabel::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataLabel::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 DataLabel::value() const {
  return value_;
}
inline void DataLabel::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// optional string label = 3;
inline bool DataLabel::has_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataLabel::set_has_label() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataLabel::clear_has_label() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataLabel::clear_label() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& DataLabel::label() const {
  return *label_;
}
inline void DataLabel::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void DataLabel::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void DataLabel::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataLabel::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* DataLabel::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataLabel::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DataControl

// optional string name = 1;
inline bool DataControl::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataControl::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataControl::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataControl::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DataControl::name() const {
  return *name_;
}
inline void DataControl::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataControl::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DataControl::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataControl::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DataControl::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataControl::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .vb_control_t type = 2;
inline bool DataControl::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataControl::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataControl::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataControl::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::vb_control_t DataControl::type() const {
  return static_cast< ::vb_control_t >(type_);
}
inline void DataControl::set_type(::vb_control_t value) {
  assert(::vb_control_t_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional float range_min_float = 3;
inline bool DataControl::has_range_min_float() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataControl::set_has_range_min_float() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataControl::clear_has_range_min_float() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataControl::clear_range_min_float() {
  range_min_float_ = 0;
  clear_has_range_min_float();
}
inline float DataControl::range_min_float() const {
  return range_min_float_;
}
inline void DataControl::set_range_min_float(float value) {
  set_has_range_min_float();
  range_min_float_ = value;
}

// optional float range_max_float = 4;
inline bool DataControl::has_range_max_float() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataControl::set_has_range_max_float() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataControl::clear_has_range_max_float() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataControl::clear_range_max_float() {
  range_max_float_ = 0;
  clear_has_range_max_float();
}
inline float DataControl::range_max_float() const {
  return range_max_float_;
}
inline void DataControl::set_range_max_float(float value) {
  set_has_range_max_float();
  range_max_float_ = value;
}

// optional uint32 num_steps = 5;
inline bool DataControl::has_num_steps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataControl::set_has_num_steps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataControl::clear_has_num_steps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataControl::clear_num_steps() {
  num_steps_ = 0u;
  clear_has_num_steps();
}
inline ::google::protobuf::uint32 DataControl::num_steps() const {
  return num_steps_;
}
inline void DataControl::set_num_steps(::google::protobuf::uint32 value) {
  set_has_num_steps();
  num_steps_ = value;
}

// optional uint32 range_min_int = 6;
inline bool DataControl::has_range_min_int() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataControl::set_has_range_min_int() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataControl::clear_has_range_min_int() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataControl::clear_range_min_int() {
  range_min_int_ = 0u;
  clear_has_range_min_int();
}
inline ::google::protobuf::uint32 DataControl::range_min_int() const {
  return range_min_int_;
}
inline void DataControl::set_range_min_int(::google::protobuf::uint32 value) {
  set_has_range_min_int();
  range_min_int_ = value;
}

// optional uint32 range_max_int = 7;
inline bool DataControl::has_range_max_int() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataControl::set_has_range_max_int() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataControl::clear_has_range_max_int() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataControl::clear_range_max_int() {
  range_max_int_ = 0u;
  clear_has_range_max_int();
}
inline ::google::protobuf::uint32 DataControl::range_max_int() const {
  return range_max_int_;
}
inline void DataControl::set_range_max_int(::google::protobuf::uint32 value) {
  set_has_range_max_int();
  range_max_int_ = value;
}

// optional uint32 step_size = 8;
inline bool DataControl::has_step_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataControl::set_has_step_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataControl::clear_has_step_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataControl::clear_step_size() {
  step_size_ = 0u;
  clear_has_step_size();
}
inline ::google::protobuf::uint32 DataControl::step_size() const {
  return step_size_;
}
inline void DataControl::set_step_size(::google::protobuf::uint32 value) {
  set_has_step_size();
  step_size_ = value;
}

// optional float value_float = 9;
inline bool DataControl::has_value_float() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataControl::set_has_value_float() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataControl::clear_has_value_float() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataControl::clear_value_float() {
  value_float_ = 0;
  clear_has_value_float();
}
inline float DataControl::value_float() const {
  return value_float_;
}
inline void DataControl::set_value_float(float value) {
  set_has_value_float();
  value_float_ = value;
}

// optional uint32 value_int = 10;
inline bool DataControl::has_value_int() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DataControl::set_has_value_int() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DataControl::clear_has_value_int() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DataControl::clear_value_int() {
  value_int_ = 0u;
  clear_has_value_int();
}
inline ::google::protobuf::uint32 DataControl::value_int() const {
  return value_int_;
}
inline void DataControl::set_value_int(::google::protobuf::uint32 value) {
  set_has_value_int();
  value_int_ = value;
}

// optional string command = 11;
inline bool DataControl::has_command() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DataControl::set_has_command() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DataControl::clear_has_command() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DataControl::clear_command() {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    command_->clear();
  }
  clear_has_command();
}
inline const ::std::string& DataControl::command() const {
  return *command_;
}
inline void DataControl::set_command(const ::std::string& value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void DataControl::set_command(const char* value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void DataControl::set_command(const char* value, size_t size) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataControl::mutable_command() {
  set_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    command_ = new ::std::string;
  }
  return command_;
}
inline ::std::string* DataControl::release_command() {
  clear_has_command();
  if (command_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = command_;
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DataControl::set_allocated_command(::std::string* command) {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (command) {
    set_has_command();
    command_ = command;
  } else {
    clear_has_command();
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Packet

// optional .Data data = 1;
inline bool Packet::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet::clear_data() {
  if (data_ != NULL) data_->::Data::Clear();
  clear_has_data();
}
inline const ::Data& Packet::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Data* Packet::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Data;
  return data_;
}
inline ::Data* Packet::release_data() {
  clear_has_data();
  ::Data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void Packet::set_allocated_data(::Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// repeated .DataChannel data_channels = 2;
inline int Packet::data_channels_size() const {
  return data_channels_.size();
}
inline void Packet::clear_data_channels() {
  data_channels_.Clear();
}
inline const ::DataChannel& Packet::data_channels(int index) const {
  return data_channels_.Get(index);
}
inline ::DataChannel* Packet::mutable_data_channels(int index) {
  return data_channels_.Mutable(index);
}
inline ::DataChannel* Packet::add_data_channels() {
  return data_channels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DataChannel >&
Packet::data_channels() const {
  return data_channels_;
}
inline ::google::protobuf::RepeatedPtrField< ::DataChannel >*
Packet::mutable_data_channels() {
  return &data_channels_;
}

// repeated .DataGroup data_groups = 3;
inline int Packet::data_groups_size() const {
  return data_groups_.size();
}
inline void Packet::clear_data_groups() {
  data_groups_.Clear();
}
inline const ::DataGroup& Packet::data_groups(int index) const {
  return data_groups_.Get(index);
}
inline ::DataGroup* Packet::mutable_data_groups(int index) {
  return data_groups_.Mutable(index);
}
inline ::DataGroup* Packet::add_data_groups() {
  return data_groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DataGroup >&
Packet::data_groups() const {
  return data_groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::DataGroup >*
Packet::mutable_data_groups() {
  return &data_groups_;
}

// repeated .DataLabel data_labels = 4;
inline int Packet::data_labels_size() const {
  return data_labels_.size();
}
inline void Packet::clear_data_labels() {
  data_labels_.Clear();
}
inline const ::DataLabel& Packet::data_labels(int index) const {
  return data_labels_.Get(index);
}
inline ::DataLabel* Packet::mutable_data_labels(int index) {
  return data_labels_.Mutable(index);
}
inline ::DataLabel* Packet::add_data_labels() {
  return data_labels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DataLabel >&
Packet::data_labels() const {
  return data_labels_;
}
inline ::google::protobuf::RepeatedPtrField< ::DataLabel >*
Packet::mutable_data_labels() {
  return &data_labels_;
}

// repeated .DataControl data_controls = 5;
inline int Packet::data_controls_size() const {
  return data_controls_.size();
}
inline void Packet::clear_data_controls() {
  data_controls_.Clear();
}
inline const ::DataControl& Packet::data_controls(int index) const {
  return data_controls_.Get(index);
}
inline ::DataControl* Packet::mutable_data_controls(int index) {
  return data_controls_.Mutable(index);
}
inline ::DataControl* Packet::add_data_controls() {
  return data_controls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DataControl >&
Packet::data_controls() const {
  return data_controls_;
}
inline ::google::protobuf::RepeatedPtrField< ::DataControl >*
Packet::mutable_data_controls() {
  return &data_controls_;
}

// optional string console_output = 6;
inline bool Packet::has_console_output() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Packet::set_has_console_output() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Packet::clear_has_console_output() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Packet::clear_console_output() {
  if (console_output_ != &::google::protobuf::internal::kEmptyString) {
    console_output_->clear();
  }
  clear_has_console_output();
}
inline const ::std::string& Packet::console_output() const {
  return *console_output_;
}
inline void Packet::set_console_output(const ::std::string& value) {
  set_has_console_output();
  if (console_output_ == &::google::protobuf::internal::kEmptyString) {
    console_output_ = new ::std::string;
  }
  console_output_->assign(value);
}
inline void Packet::set_console_output(const char* value) {
  set_has_console_output();
  if (console_output_ == &::google::protobuf::internal::kEmptyString) {
    console_output_ = new ::std::string;
  }
  console_output_->assign(value);
}
inline void Packet::set_console_output(const char* value, size_t size) {
  set_has_console_output();
  if (console_output_ == &::google::protobuf::internal::kEmptyString) {
    console_output_ = new ::std::string;
  }
  console_output_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Packet::mutable_console_output() {
  set_has_console_output();
  if (console_output_ == &::google::protobuf::internal::kEmptyString) {
    console_output_ = new ::std::string;
  }
  return console_output_;
}
inline ::std::string* Packet::release_console_output() {
  clear_has_console_output();
  if (console_output_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = console_output_;
    console_output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Packet::set_allocated_console_output(::std::string* console_output) {
  if (console_output_ != &::google::protobuf::internal::kEmptyString) {
    delete console_output_;
  }
  if (console_output) {
    set_has_console_output();
    console_output_ = console_output;
  } else {
    clear_has_console_output();
    console_output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string status = 7;
inline bool Packet::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Packet::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Packet::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Packet::clear_status() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    status_->clear();
  }
  clear_has_status();
}
inline const ::std::string& Packet::status() const {
  return *status_;
}
inline void Packet::set_status(const ::std::string& value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void Packet::set_status(const char* value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void Packet::set_status(const char* value, size_t size) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Packet::mutable_status() {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  return status_;
}
inline ::std::string* Packet::release_status() {
  clear_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = status_;
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Packet::set_allocated_status(::std::string* status) {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (status) {
    set_has_status();
    status_ = status;
  } else {
    clear_has_status();
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_registration = 8;
inline bool Packet::has_is_registration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Packet::set_has_is_registration() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Packet::clear_has_is_registration() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Packet::clear_is_registration() {
  is_registration_ = false;
  clear_has_is_registration();
}
inline bool Packet::is_registration() const {
  return is_registration_;
}
inline void Packet::set_is_registration(bool value) {
  set_has_is_registration();
  is_registration_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vb_data_type_t>() {
  return ::vb_data_type_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vb_control_t>() {
  return ::vb_control_t_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobuf_2fdata_2eproto__INCLUDED
