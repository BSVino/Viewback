// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protobuf/data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataLabel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataLabel_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* vb_data_type_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* vb_control_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protobuf_2fdata_2eproto() {
  protobuf_AddDesc_protobuf_2fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protobuf/data.proto");
  GOOGLE_CHECK(file != NULL);
  Data_descriptor_ = file->message_type(0);
  static const int Data_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, data_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, data_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, data_float_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, data_float_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, data_float_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, time_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, time_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, maintain_time_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, maintain_time_uint64_),
  };
  Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Data_descriptor_,
      Data::default_instance_,
      Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Data));
  DataChannel_descriptor_ = file->message_type(1);
  static const int DataChannel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataChannel, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataChannel, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataChannel, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataChannel, range_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataChannel, range_max_),
  };
  DataChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataChannel_descriptor_,
      DataChannel::default_instance_,
      DataChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataChannel));
  DataGroup_descriptor_ = file->message_type(2);
  static const int DataGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGroup, channels_),
  };
  DataGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataGroup_descriptor_,
      DataGroup::default_instance_,
      DataGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataGroup));
  DataLabel_descriptor_ = file->message_type(3);
  static const int DataLabel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLabel, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLabel, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLabel, label_),
  };
  DataLabel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataLabel_descriptor_,
      DataLabel::default_instance_,
      DataLabel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLabel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataLabel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataLabel));
  DataControl_descriptor_ = file->message_type(4);
  static const int DataControl_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataControl, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataControl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataControl, range_min_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataControl, range_max_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataControl, num_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataControl, range_min_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataControl, range_max_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataControl, step_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataControl, value_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataControl, value_int_),
  };
  DataControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataControl_descriptor_,
      DataControl::default_instance_,
      DataControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataControl));
  Packet_descriptor_ = file->message_type(5);
  static const int Packet_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, data_channels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, data_groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, data_labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, data_controls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, console_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, is_registration_),
  };
  Packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_descriptor_,
      Packet::default_instance_,
      Packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet));
  vb_data_type_t_descriptor_ = file->enum_type(0);
  vb_control_t_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protobuf_2fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Data_descriptor_, &Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataChannel_descriptor_, &DataChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataGroup_descriptor_, &DataGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataLabel_descriptor_, &DataLabel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataControl_descriptor_, &DataControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_descriptor_, &Packet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protobuf_2fdata_2eproto() {
  delete Data::default_instance_;
  delete Data_reflection_;
  delete DataChannel::default_instance_;
  delete DataChannel_reflection_;
  delete DataGroup::default_instance_;
  delete DataGroup_reflection_;
  delete DataLabel::default_instance_;
  delete DataLabel_reflection_;
  delete DataControl::default_instance_;
  delete DataControl_reflection_;
  delete Packet::default_instance_;
  delete Packet_reflection_;
}

void protobuf_AddDesc_protobuf_2fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023protobuf/data.proto\"\344\001\n\004Data\022\016\n\006handle"
    "\030\001 \001(\r\022\020\n\010data_int\030\003 \001(\r\022\022\n\ndata_float\030\004"
    " \001(\002\022\024\n\014data_float_x\030\005 \001(\002\022\024\n\014data_float"
    "_y\030\006 \001(\002\022\024\n\014data_float_z\030\007 \001(\002\022\023\n\013time_d"
    "ouble\030\010 \001(\001\022\023\n\013time_uint64\030\t \001(\004\022\034\n\024main"
    "tain_time_double\030\n \001(\001\022\034\n\024maintain_time_"
    "uint64\030\013 \001(\004\"p\n\013DataChannel\022\014\n\004name\030\001 \001("
    "\t\022\035\n\004type\030\002 \001(\0162\017.vb_data_type_t\022\016\n\006hand"
    "le\030\003 \001(\r\022\021\n\trange_min\030\004 \001(\002\022\021\n\trange_max"
    "\030\005 \001(\002\"/\n\tDataGroup\022\014\n\004name\030\001 \001(\t\022\024\n\010cha"
    "nnels\030\002 \003(\rB\002\020\001\":\n\tDataLabel\022\017\n\007channel\030"
    "\001 \001(\r\022\r\n\005value\030\002 \001(\r\022\r\n\005label\030\003 \001(\t\"\346\001\n\013"
    "DataControl\022\014\n\004name\030\001 \001(\t\022\033\n\004type\030\002 \001(\0162"
    "\r.vb_control_t\022\027\n\017range_min_float\030\003 \001(\002\022"
    "\027\n\017range_max_float\030\004 \001(\002\022\021\n\tnum_steps\030\005 "
    "\001(\r\022\025\n\rrange_min_int\030\006 \001(\r\022\025\n\rrange_max_"
    "int\030\007 \001(\r\022\021\n\tstep_size\030\010 \001(\r\022\023\n\013value_fl"
    "oat\030\t \001(\002\022\021\n\tvalue_int\030\n \001(\r\"\352\001\n\006Packet\022"
    "\023\n\004data\030\001 \001(\0132\005.Data\022#\n\rdata_channels\030\002 "
    "\003(\0132\014.DataChannel\022\037\n\013data_groups\030\003 \003(\0132\n"
    ".DataGroup\022\037\n\013data_labels\030\004 \003(\0132\n.DataLa"
    "bel\022#\n\rdata_controls\030\005 \003(\0132\014.DataControl"
    "\022\026\n\016console_output\030\006 \001(\t\022\016\n\006status\030\007 \001(\t"
    "\022\027\n\017is_registration\030\010 \001(\010*j\n\016vb_data_typ"
    "e_t\022\024\n\020VB_DATATYPE_NONE\020\000\022\023\n\017VB_DATATYPE"
    "_INT\020\001\022\025\n\021VB_DATATYPE_FLOAT\020\002\022\026\n\022VB_DATA"
    "TYPE_VECTOR\020\003*\206\001\n\014vb_control_t\022\023\n\017VB_CON"
    "TROL_NONE\020\000\022\025\n\021VB_CONTROL_BUTTON\020\001\022\033\n\027VB"
    "_CONTROL_SLIDER_FLOAT\020\002\022\031\n\025VB_CONTROL_SL"
    "IDER_INT\020\003\022\022\n\016VB_CONTROL_MAX\020\004", 1190);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobuf/data.proto", &protobuf_RegisterTypes);
  Data::default_instance_ = new Data();
  DataChannel::default_instance_ = new DataChannel();
  DataGroup::default_instance_ = new DataGroup();
  DataLabel::default_instance_ = new DataLabel();
  DataControl::default_instance_ = new DataControl();
  Packet::default_instance_ = new Packet();
  Data::default_instance_->InitAsDefaultInstance();
  DataChannel::default_instance_->InitAsDefaultInstance();
  DataGroup::default_instance_->InitAsDefaultInstance();
  DataLabel::default_instance_->InitAsDefaultInstance();
  DataControl::default_instance_->InitAsDefaultInstance();
  Packet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protobuf_2fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protobuf_2fdata_2eproto {
  StaticDescriptorInitializer_protobuf_2fdata_2eproto() {
    protobuf_AddDesc_protobuf_2fdata_2eproto();
  }
} static_descriptor_initializer_protobuf_2fdata_2eproto_;
const ::google::protobuf::EnumDescriptor* vb_data_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vb_data_type_t_descriptor_;
}
bool vb_data_type_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* vb_control_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vb_control_t_descriptor_;
}
bool vb_control_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Data::kHandleFieldNumber;
const int Data::kDataIntFieldNumber;
const int Data::kDataFloatFieldNumber;
const int Data::kDataFloatXFieldNumber;
const int Data::kDataFloatYFieldNumber;
const int Data::kDataFloatZFieldNumber;
const int Data::kTimeDoubleFieldNumber;
const int Data::kTimeUint64FieldNumber;
const int Data::kMaintainTimeDoubleFieldNumber;
const int Data::kMaintainTimeUint64FieldNumber;
#endif  // !_MSC_VER

Data::Data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Data::InitAsDefaultInstance() {
}

Data::Data(const Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Data::SharedCtor() {
  _cached_size_ = 0;
  handle_ = 0u;
  data_int_ = 0u;
  data_float_ = 0;
  data_float_x_ = 0;
  data_float_y_ = 0;
  data_float_z_ = 0;
  time_double_ = 0;
  time_uint64_ = GOOGLE_ULONGLONG(0);
  maintain_time_double_ = 0;
  maintain_time_uint64_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Data::~Data() {
  SharedDtor();
}

void Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fdata_2eproto();
  return *default_instance_;
}

Data* Data::default_instance_ = NULL;

Data* Data::New() const {
  return new Data;
}

void Data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handle_ = 0u;
    data_int_ = 0u;
    data_float_ = 0;
    data_float_x_ = 0;
    data_float_y_ = 0;
    data_float_z_ = 0;
    time_double_ = 0;
    time_uint64_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maintain_time_double_ = 0;
    maintain_time_uint64_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data_int;
        break;
      }

      // optional uint32 data_int = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_int_)));
          set_has_data_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_data_float;
        break;
      }

      // optional float data_float = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_data_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_float_)));
          set_has_data_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_data_float_x;
        break;
      }

      // optional float data_float_x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_data_float_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_float_x_)));
          set_has_data_float_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_data_float_y;
        break;
      }

      // optional float data_float_y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_data_float_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_float_y_)));
          set_has_data_float_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_data_float_z;
        break;
      }

      // optional float data_float_z = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_data_float_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_float_z_)));
          set_has_data_float_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_time_double;
        break;
      }

      // optional double time_double = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_double_)));
          set_has_time_double();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_time_uint64;
        break;
      }

      // optional uint64 time_uint64 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_uint64_)));
          set_has_time_uint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_maintain_time_double;
        break;
      }

      // optional double maintain_time_double = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maintain_time_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maintain_time_double_)));
          set_has_maintain_time_double();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_maintain_time_uint64;
        break;
      }

      // optional uint64 maintain_time_uint64 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maintain_time_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maintain_time_uint64_)));
          set_has_maintain_time_uint64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 handle = 1;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->handle(), output);
  }

  // optional uint32 data_int = 3;
  if (has_data_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_int(), output);
  }

  // optional float data_float = 4;
  if (has_data_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->data_float(), output);
  }

  // optional float data_float_x = 5;
  if (has_data_float_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->data_float_x(), output);
  }

  // optional float data_float_y = 6;
  if (has_data_float_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->data_float_y(), output);
  }

  // optional float data_float_z = 7;
  if (has_data_float_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->data_float_z(), output);
  }

  // optional double time_double = 8;
  if (has_time_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->time_double(), output);
  }

  // optional uint64 time_uint64 = 9;
  if (has_time_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->time_uint64(), output);
  }

  // optional double maintain_time_double = 10;
  if (has_maintain_time_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->maintain_time_double(), output);
  }

  // optional uint64 maintain_time_uint64 = 11;
  if (has_maintain_time_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->maintain_time_uint64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 handle = 1;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->handle(), target);
  }

  // optional uint32 data_int = 3;
  if (has_data_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data_int(), target);
  }

  // optional float data_float = 4;
  if (has_data_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->data_float(), target);
  }

  // optional float data_float_x = 5;
  if (has_data_float_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->data_float_x(), target);
  }

  // optional float data_float_y = 6;
  if (has_data_float_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->data_float_y(), target);
  }

  // optional float data_float_z = 7;
  if (has_data_float_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->data_float_z(), target);
  }

  // optional double time_double = 8;
  if (has_time_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->time_double(), target);
  }

  // optional uint64 time_uint64 = 9;
  if (has_time_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->time_uint64(), target);
  }

  // optional double maintain_time_double = 10;
  if (has_maintain_time_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->maintain_time_double(), target);
  }

  // optional uint64 maintain_time_uint64 = 11;
  if (has_maintain_time_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->maintain_time_uint64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

    // optional uint32 data_int = 3;
    if (has_data_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_int());
    }

    // optional float data_float = 4;
    if (has_data_float()) {
      total_size += 1 + 4;
    }

    // optional float data_float_x = 5;
    if (has_data_float_x()) {
      total_size += 1 + 4;
    }

    // optional float data_float_y = 6;
    if (has_data_float_y()) {
      total_size += 1 + 4;
    }

    // optional float data_float_z = 7;
    if (has_data_float_z()) {
      total_size += 1 + 4;
    }

    // optional double time_double = 8;
    if (has_time_double()) {
      total_size += 1 + 8;
    }

    // optional uint64 time_uint64 = 9;
    if (has_time_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_uint64());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double maintain_time_double = 10;
    if (has_maintain_time_double()) {
      total_size += 1 + 8;
    }

    // optional uint64 maintain_time_uint64 = 11;
    if (has_maintain_time_uint64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maintain_time_uint64());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_data_int()) {
      set_data_int(from.data_int());
    }
    if (from.has_data_float()) {
      set_data_float(from.data_float());
    }
    if (from.has_data_float_x()) {
      set_data_float_x(from.data_float_x());
    }
    if (from.has_data_float_y()) {
      set_data_float_y(from.data_float_y());
    }
    if (from.has_data_float_z()) {
      set_data_float_z(from.data_float_z());
    }
    if (from.has_time_double()) {
      set_time_double(from.time_double());
    }
    if (from.has_time_uint64()) {
      set_time_uint64(from.time_uint64());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maintain_time_double()) {
      set_maintain_time_double(from.maintain_time_double());
    }
    if (from.has_maintain_time_uint64()) {
      set_maintain_time_uint64(from.maintain_time_uint64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {

  return true;
}

void Data::Swap(Data* other) {
  if (other != this) {
    std::swap(handle_, other->handle_);
    std::swap(data_int_, other->data_int_);
    std::swap(data_float_, other->data_float_);
    std::swap(data_float_x_, other->data_float_x_);
    std::swap(data_float_y_, other->data_float_y_);
    std::swap(data_float_z_, other->data_float_z_);
    std::swap(time_double_, other->time_double_);
    std::swap(time_uint64_, other->time_uint64_);
    std::swap(maintain_time_double_, other->maintain_time_double_);
    std::swap(maintain_time_uint64_, other->maintain_time_uint64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataChannel::kNameFieldNumber;
const int DataChannel::kTypeFieldNumber;
const int DataChannel::kHandleFieldNumber;
const int DataChannel::kRangeMinFieldNumber;
const int DataChannel::kRangeMaxFieldNumber;
#endif  // !_MSC_VER

DataChannel::DataChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataChannel::InitAsDefaultInstance() {
}

DataChannel::DataChannel(const DataChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataChannel::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  handle_ = 0u;
  range_min_ = 0;
  range_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataChannel::~DataChannel() {
  SharedDtor();
}

void DataChannel::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DataChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataChannel_descriptor_;
}

const DataChannel& DataChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fdata_2eproto();
  return *default_instance_;
}

DataChannel* DataChannel::default_instance_ = NULL;

DataChannel* DataChannel::New() const {
  return new DataChannel;
}

void DataChannel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    handle_ = 0u;
    range_min_ = 0;
    range_max_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .vb_data_type_t type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vb_data_type_t_IsValid(value)) {
            set_type(static_cast< ::vb_data_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handle;
        break;
      }

      // optional uint32 handle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_range_min;
        break;
      }

      // optional float range_min = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_min_)));
          set_has_range_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_range_max;
        break;
      }

      // optional float range_max = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_max_)));
          set_has_range_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .vb_data_type_t type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 handle = 3;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->handle(), output);
  }

  // optional float range_min = 4;
  if (has_range_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->range_min(), output);
  }

  // optional float range_max = 5;
  if (has_range_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->range_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .vb_data_type_t type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 handle = 3;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->handle(), target);
  }

  // optional float range_min = 4;
  if (has_range_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->range_min(), target);
  }

  // optional float range_max = 5;
  if (has_range_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->range_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .vb_data_type_t type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 handle = 3;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

    // optional float range_min = 4;
    if (has_range_min()) {
      total_size += 1 + 4;
    }

    // optional float range_max = 5;
    if (has_range_max()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataChannel::MergeFrom(const DataChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_range_min()) {
      set_range_min(from.range_min());
    }
    if (from.has_range_max()) {
      set_range_max(from.range_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataChannel::CopyFrom(const DataChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataChannel::IsInitialized() const {

  return true;
}

void DataChannel::Swap(DataChannel* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(handle_, other->handle_);
    std::swap(range_min_, other->range_min_);
    std::swap(range_max_, other->range_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataChannel_descriptor_;
  metadata.reflection = DataChannel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataGroup::kNameFieldNumber;
const int DataGroup::kChannelsFieldNumber;
#endif  // !_MSC_VER

DataGroup::DataGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataGroup::InitAsDefaultInstance() {
}

DataGroup::DataGroup(const DataGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataGroup::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataGroup::~DataGroup() {
  SharedDtor();
}

void DataGroup::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DataGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataGroup_descriptor_;
}

const DataGroup& DataGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fdata_2eproto();
  return *default_instance_;
}

DataGroup* DataGroup::default_instance_ = NULL;

DataGroup* DataGroup::New() const {
  return new DataGroup;
}

void DataGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channels;
        break;
      }

      // repeated uint32 channels = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_channels())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_channels())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated uint32 channels = 2 [packed = true];
  if (this->channels_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_channels_cached_byte_size_);
  }
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->channels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated uint32 channels = 2 [packed = true];
  if (this->channels_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _channels_cached_byte_size_, target);
  }
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->channels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated uint32 channels = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->channels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->channels(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _channels_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataGroup::MergeFrom(const DataGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  channels_.MergeFrom(from.channels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataGroup::CopyFrom(const DataGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataGroup::IsInitialized() const {

  return true;
}

void DataGroup::Swap(DataGroup* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    channels_.Swap(&other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataGroup_descriptor_;
  metadata.reflection = DataGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataLabel::kChannelFieldNumber;
const int DataLabel::kValueFieldNumber;
const int DataLabel::kLabelFieldNumber;
#endif  // !_MSC_VER

DataLabel::DataLabel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataLabel::InitAsDefaultInstance() {
}

DataLabel::DataLabel(const DataLabel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataLabel::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0u;
  value_ = 0u;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataLabel::~DataLabel() {
  SharedDtor();
}

void DataLabel::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void DataLabel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataLabel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataLabel_descriptor_;
}

const DataLabel& DataLabel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fdata_2eproto();
  return *default_instance_;
}

DataLabel* DataLabel::default_instance_ = NULL;

DataLabel* DataLabel::New() const {
  return new DataLabel;
}

void DataLabel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0u;
    value_ = 0u;
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_label;
        break;
      }

      // optional string label = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional string label = 3;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataLabel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional string label = 3;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataLabel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional string label = 3;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataLabel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataLabel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataLabel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataLabel::MergeFrom(const DataLabel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataLabel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataLabel::CopyFrom(const DataLabel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataLabel::IsInitialized() const {

  return true;
}

void DataLabel::Swap(DataLabel* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(value_, other->value_);
    std::swap(label_, other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataLabel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataLabel_descriptor_;
  metadata.reflection = DataLabel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataControl::kNameFieldNumber;
const int DataControl::kTypeFieldNumber;
const int DataControl::kRangeMinFloatFieldNumber;
const int DataControl::kRangeMaxFloatFieldNumber;
const int DataControl::kNumStepsFieldNumber;
const int DataControl::kRangeMinIntFieldNumber;
const int DataControl::kRangeMaxIntFieldNumber;
const int DataControl::kStepSizeFieldNumber;
const int DataControl::kValueFloatFieldNumber;
const int DataControl::kValueIntFieldNumber;
#endif  // !_MSC_VER

DataControl::DataControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataControl::InitAsDefaultInstance() {
}

DataControl::DataControl(const DataControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataControl::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  range_min_float_ = 0;
  range_max_float_ = 0;
  num_steps_ = 0u;
  range_min_int_ = 0u;
  range_max_int_ = 0u;
  step_size_ = 0u;
  value_float_ = 0;
  value_int_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataControl::~DataControl() {
  SharedDtor();
}

void DataControl::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DataControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataControl_descriptor_;
}

const DataControl& DataControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fdata_2eproto();
  return *default_instance_;
}

DataControl* DataControl::default_instance_ = NULL;

DataControl* DataControl::New() const {
  return new DataControl;
}

void DataControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    range_min_float_ = 0;
    range_max_float_ = 0;
    num_steps_ = 0u;
    range_min_int_ = 0u;
    range_max_int_ = 0u;
    step_size_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    value_float_ = 0;
    value_int_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .vb_control_t type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vb_control_t_IsValid(value)) {
            set_type(static_cast< ::vb_control_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_range_min_float;
        break;
      }

      // optional float range_min_float = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_min_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_min_float_)));
          set_has_range_min_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_range_max_float;
        break;
      }

      // optional float range_max_float = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range_max_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_max_float_)));
          set_has_range_max_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_steps;
        break;
      }

      // optional uint32 num_steps = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_steps_)));
          set_has_num_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_range_min_int;
        break;
      }

      // optional uint32 range_min_int = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range_min_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_min_int_)));
          set_has_range_min_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_range_max_int;
        break;
      }

      // optional uint32 range_max_int = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range_max_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_max_int_)));
          set_has_range_max_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_step_size;
        break;
      }

      // optional uint32 step_size = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_size_)));
          set_has_step_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_value_float;
        break;
      }

      // optional float value_float = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_float_)));
          set_has_value_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_value_int;
        break;
      }

      // optional uint32 value_int = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_int_)));
          set_has_value_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .vb_control_t type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional float range_min_float = 3;
  if (has_range_min_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->range_min_float(), output);
  }

  // optional float range_max_float = 4;
  if (has_range_max_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->range_max_float(), output);
  }

  // optional uint32 num_steps = 5;
  if (has_num_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_steps(), output);
  }

  // optional uint32 range_min_int = 6;
  if (has_range_min_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->range_min_int(), output);
  }

  // optional uint32 range_max_int = 7;
  if (has_range_max_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->range_max_int(), output);
  }

  // optional uint32 step_size = 8;
  if (has_step_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->step_size(), output);
  }

  // optional float value_float = 9;
  if (has_value_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->value_float(), output);
  }

  // optional uint32 value_int = 10;
  if (has_value_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->value_int(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .vb_control_t type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional float range_min_float = 3;
  if (has_range_min_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->range_min_float(), target);
  }

  // optional float range_max_float = 4;
  if (has_range_max_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->range_max_float(), target);
  }

  // optional uint32 num_steps = 5;
  if (has_num_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_steps(), target);
  }

  // optional uint32 range_min_int = 6;
  if (has_range_min_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->range_min_int(), target);
  }

  // optional uint32 range_max_int = 7;
  if (has_range_max_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->range_max_int(), target);
  }

  // optional uint32 step_size = 8;
  if (has_step_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->step_size(), target);
  }

  // optional float value_float = 9;
  if (has_value_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->value_float(), target);
  }

  // optional uint32 value_int = 10;
  if (has_value_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->value_int(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .vb_control_t type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float range_min_float = 3;
    if (has_range_min_float()) {
      total_size += 1 + 4;
    }

    // optional float range_max_float = 4;
    if (has_range_max_float()) {
      total_size += 1 + 4;
    }

    // optional uint32 num_steps = 5;
    if (has_num_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_steps());
    }

    // optional uint32 range_min_int = 6;
    if (has_range_min_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range_min_int());
    }

    // optional uint32 range_max_int = 7;
    if (has_range_max_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range_max_int());
    }

    // optional uint32 step_size = 8;
    if (has_step_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float value_float = 9;
    if (has_value_float()) {
      total_size += 1 + 4;
    }

    // optional uint32 value_int = 10;
    if (has_value_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_int());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataControl::MergeFrom(const DataControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_range_min_float()) {
      set_range_min_float(from.range_min_float());
    }
    if (from.has_range_max_float()) {
      set_range_max_float(from.range_max_float());
    }
    if (from.has_num_steps()) {
      set_num_steps(from.num_steps());
    }
    if (from.has_range_min_int()) {
      set_range_min_int(from.range_min_int());
    }
    if (from.has_range_max_int()) {
      set_range_max_int(from.range_max_int());
    }
    if (from.has_step_size()) {
      set_step_size(from.step_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_value_float()) {
      set_value_float(from.value_float());
    }
    if (from.has_value_int()) {
      set_value_int(from.value_int());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataControl::CopyFrom(const DataControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataControl::IsInitialized() const {

  return true;
}

void DataControl::Swap(DataControl* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(range_min_float_, other->range_min_float_);
    std::swap(range_max_float_, other->range_max_float_);
    std::swap(num_steps_, other->num_steps_);
    std::swap(range_min_int_, other->range_min_int_);
    std::swap(range_max_int_, other->range_max_int_);
    std::swap(step_size_, other->step_size_);
    std::swap(value_float_, other->value_float_);
    std::swap(value_int_, other->value_int_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataControl_descriptor_;
  metadata.reflection = DataControl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Packet::kDataFieldNumber;
const int Packet::kDataChannelsFieldNumber;
const int Packet::kDataGroupsFieldNumber;
const int Packet::kDataLabelsFieldNumber;
const int Packet::kDataControlsFieldNumber;
const int Packet::kConsoleOutputFieldNumber;
const int Packet::kStatusFieldNumber;
const int Packet::kIsRegistrationFieldNumber;
#endif  // !_MSC_VER

Packet::Packet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet::InitAsDefaultInstance() {
  data_ = const_cast< ::Data*>(&::Data::default_instance());
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  console_output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_registration_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet::~Packet() {
  SharedDtor();
}

void Packet::SharedDtor() {
  if (console_output_ != &::google::protobuf::internal::kEmptyString) {
    delete console_output_;
  }
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_descriptor_;
}

const Packet& Packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2fdata_2eproto();
  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New() const {
  return new Packet;
}

void Packet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::Data::Clear();
    }
    if (has_console_output()) {
      if (console_output_ != &::google::protobuf::internal::kEmptyString) {
        console_output_->clear();
      }
    }
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
    is_registration_ = false;
  }
  data_channels_.Clear();
  data_groups_.Clear();
  data_labels_.Clear();
  data_controls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Data data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_channels;
        break;
      }

      // repeated .DataChannel data_channels = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_channels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_channels;
        if (input->ExpectTag(26)) goto parse_data_groups;
        break;
      }

      // repeated .DataGroup data_groups = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data_groups;
        if (input->ExpectTag(34)) goto parse_data_labels;
        break;
      }

      // repeated .DataLabel data_labels = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data_labels;
        if (input->ExpectTag(42)) goto parse_data_controls;
        break;
      }

      // repeated .DataControl data_controls = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_controls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_controls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data_controls;
        if (input->ExpectTag(50)) goto parse_console_output;
        break;
      }

      // optional string console_output = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_console_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_console_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->console_output().data(), this->console_output().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_status;
        break;
      }

      // optional string status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_registration;
        break;
      }

      // optional bool is_registration = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_registration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_registration_)));
          set_has_is_registration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Data data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // repeated .DataChannel data_channels = 2;
  for (int i = 0; i < this->data_channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data_channels(i), output);
  }

  // repeated .DataGroup data_groups = 3;
  for (int i = 0; i < this->data_groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data_groups(i), output);
  }

  // repeated .DataLabel data_labels = 4;
  for (int i = 0; i < this->data_labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data_labels(i), output);
  }

  // repeated .DataControl data_controls = 5;
  for (int i = 0; i < this->data_controls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data_controls(i), output);
  }

  // optional string console_output = 6;
  if (has_console_output()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->console_output().data(), this->console_output().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->console_output(), output);
  }

  // optional string status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->status(), output);
  }

  // optional bool is_registration = 8;
  if (has_is_registration()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_registration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Data data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // repeated .DataChannel data_channels = 2;
  for (int i = 0; i < this->data_channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data_channels(i), target);
  }

  // repeated .DataGroup data_groups = 3;
  for (int i = 0; i < this->data_groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data_groups(i), target);
  }

  // repeated .DataLabel data_labels = 4;
  for (int i = 0; i < this->data_labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data_labels(i), target);
  }

  // repeated .DataControl data_controls = 5;
  for (int i = 0; i < this->data_controls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data_controls(i), target);
  }

  // optional string console_output = 6;
  if (has_console_output()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->console_output().data(), this->console_output().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->console_output(), target);
  }

  // optional string status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->status(), target);
  }

  // optional bool is_registration = 8;
  if (has_is_registration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_registration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Data data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional string console_output = 6;
    if (has_console_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->console_output());
    }

    // optional string status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

    // optional bool is_registration = 8;
    if (has_is_registration()) {
      total_size += 1 + 1;
    }

  }
  // repeated .DataChannel data_channels = 2;
  total_size += 1 * this->data_channels_size();
  for (int i = 0; i < this->data_channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_channels(i));
  }

  // repeated .DataGroup data_groups = 3;
  total_size += 1 * this->data_groups_size();
  for (int i = 0; i < this->data_groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_groups(i));
  }

  // repeated .DataLabel data_labels = 4;
  total_size += 1 * this->data_labels_size();
  for (int i = 0; i < this->data_labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_labels(i));
  }

  // repeated .DataControl data_controls = 5;
  total_size += 1 * this->data_controls_size();
  for (int i = 0; i < this->data_controls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_controls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_channels_.MergeFrom(from.data_channels_);
  data_groups_.MergeFrom(from.data_groups_);
  data_labels_.MergeFrom(from.data_labels_);
  data_controls_.MergeFrom(from.data_controls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::Data::MergeFrom(from.data());
    }
    if (from.has_console_output()) {
      set_console_output(from.console_output());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_is_registration()) {
      set_is_registration(from.is_registration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {

  return true;
}

void Packet::Swap(Packet* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    data_channels_.Swap(&other->data_channels_);
    data_groups_.Swap(&other->data_groups_);
    data_labels_.Swap(&other->data_labels_);
    data_controls_.Swap(&other->data_controls_);
    std::swap(console_output_, other->console_output_);
    std::swap(status_, other->status_);
    std::swap(is_registration_, other->is_registration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_descriptor_;
  metadata.reflection = Packet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
